{"version":3,"sources":["components/Dialog/Dialog.module.css","components/Dialog/DialogItem/DialogItem.tsx","components/Dialog/MessageItem/MessageItem.tsx","components/Dialog/Dialog.tsx","hoc/withAuthRedirect.tsx","components/Dialog/DialogContainer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","src","photo","alt","name","Message","dialogMessage","dialog_topItem","time","doalog_bottomItem","message","validateForm","values","errors","newMessage","length","Dialog","dialogElement","dialogs","map","d","messageElement","messages","m","dialogsItem","initialValues","validate","onSubmit","setSubmitting","sendMessageBody","touched","handleChange","handleBlur","handleSubmit","isSubmitting","messageForm","errorform","component","onChange","onBlur","placeholder","value","error","messageButton","type","disabled","mapStateToProps","state","isAuth","auth","compose","connect","messagesPage","actions","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"mappings":"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","file":"static/js/3.152f0d9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2SC7U\",\"name\":\"Dialog_name__1r7Kx\",\"dialogsItem\":\"Dialog_dialogsItem__2TzQl\",\"dialogs\":\"Dialog_dialogs__3rGgk\",\"active\":\"Dialog_active__1hSZH\",\"dialogMessage\":\"Dialog_dialogMessage__-WhI-\",\"dialog_topItem\":\"Dialog_dialog_topItem__1i25G\",\"doalog_bottomItem\":\"Dialog_doalog_bottomItem__1Qd0Z\",\"messageForm\":\"Dialog_messageForm__2VBTX\",\"messageButton\":\"Dialog_messageButton__1WI_q\",\"error\":\"Dialog_error__UirOf\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialog.module.css'\r\n\r\ntype PropsType={\r\n    photo: string\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem:React.FC<PropsType> =(props)=>{\r\n    let path = \"/dialog/\"+props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n                    <NavLink to={path} activeClassName={s.active}>\r\n                    <img src={props.photo} alt=\"description\"></img>\r\n                   <div className={s.name}> {props.name}</div>\r\n                    </NavLink>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialog.module.css'\r\n\r\ntype PropsType={\r\n    name: string\r\n    photo: string\r\n    time: string\r\n    message: string\r\n\r\n}\r\n\r\nconst Message:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialogMessage}>\r\n            <div className={s.dialog_topItem}>\r\n                <div>{props.name}</div>\r\n                <div><img src={props.photo} alt=\"description\"></img></div>\r\n                <div>{props.time}</div>\r\n            </div>\r\n            <div className={s.doalog_bottomItem}>{props.message} </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialog.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './MessageItem/MessageItem';\r\nimport { Formik, Form, Field, FormikErrors } from 'formik';\r\nimport { DialogsType, MessagesType } from '../../types/types';\r\n\r\n\r\n const validateForm = (values:ValuesFormType) => {\r\n    let errors:FormikErrors<ValuesFormType> = {};\r\n    if (!values.newMessage) {\r\n      errors.newMessage = 'Required';\r\n    } else if (\r\n        values.newMessage.length>50\r\n    ) {\r\n      errors.newMessage = 'Please, dont write more then 50 sumbols';\r\n    }\r\n    return errors;\r\n  }\r\n\r\ntype PropsType={\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    sendMessageBody:(newMessage:string)=>void\r\n}\r\n\r\ntype ValuesFormType={\r\n    newMessage: string\r\n}\r\n\r\nconst Dialog:React.FC<PropsType> = (props) => {\r\n\r\n    const addNewMessage = (values:ValuesFormType, { setSubmitting }:any) => {\r\n        props.sendMessageBody(values.newMessage)\r\n        setSubmitting(false);\r\n    }\r\n    let dialogElement = props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} photo={d.photo} />)\r\n    let messageElement = props.messages.map(m => <Message photo={m.photo} name={m.name} time={m.time} message={m.message} key={m.id} />)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElement}\r\n                <div>\r\n                    <Formik\r\n                        initialValues={{ newMessage: '' }}\r\n                        validate={validateForm}\r\n                        onSubmit={addNewMessage}\r\n                    >\r\n                        {({ values,\r\n                            errors,\r\n                            touched,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            handleSubmit,\r\n                            isSubmitting }) => (\r\n                            <div className={s.messageForm}>\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <Field className={errors.newMessage && touched.newMessage ? s.errorform : \"\"} component=\"textarea\" onChange={handleChange} onBlur={handleBlur}\r\n                                        placeholder=\"Write your message\" name=\"newMessage\" value={values.newMessage} />\r\n                                    {errors.newMessage && touched.newMessage && <div className={s.error}>{errors.newMessage}</div>}\r\n                                    <div className={s.messageButton}>\r\n                                        <button type=\"submit\" disabled={isSubmitting}>\r\n                                            Send messages\r\n                                    </button>\r\n                                    </div>\r\n                                </Form>\r\n                            </div>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapStateToPropsType={\r\n    isAuth:boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(Component:React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapStateToPropsType>=(props)=> {\r\n        let {isAuth, ...restProps}=props\r\n            if(!props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...restProps as WCP} />\r\n         \r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapStateToPropsType, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../redux/dialogReducer';\r\nimport Dialog from './Dialog';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { DialogsType, MessagesType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessageBody: (newMessage: string) => void\r\n}\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.messagesPage.dialogs,\r\n        messages: state.messagesPage.messages\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialog)","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"sourceRoot":""}