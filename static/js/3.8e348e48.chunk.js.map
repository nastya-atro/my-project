{"version":3,"sources":["components/Dialog/Dialog.module.css","components/Dialog/DialogItem/DialogItem.jsx","components/Dialog/MessageItem/MessageItem.jsx","components/Dialog/Dialog.jsx","components/Dialog/DialogContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","name","Message","message","Dialog","state","messagesPage","dialogElement","dialogs","map","d","messageElement","messages","m","dialogsItem","initialValues","newMessage","validate","validateForm","onSubmit","values","setSubmitting","sendMessageBody","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","errorform","component","onChange","onBlur","placeholder","value","textarea","error","type","disabled","compose","connect","dispatch","sendMessageBodyActionCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,YAAc,4BAA4B,OAAS,uBAAuB,OAAS,uBAAuB,SAAW,yBAAyB,MAAQ,sBAAsB,UAAY,4B,gGCY7NC,EATG,SAACC,GACf,IAAIC,EAAO,WAAWD,EAAME,GAC5B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACY,cAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAEI,OAAtC,SAA+CR,EAAMS,UCO1DC,EAVA,SAACV,GACZ,OACI,qBAAKG,UAAWC,IAAEC,OAAlB,SACYL,EAAMW,W,gBC2EXC,EA/DA,SAACZ,GAEZ,IAOIa,EAAQb,EAAMc,aAEdC,EAAgBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYT,KAAMS,EAAET,KAAiBP,GAAIgB,EAAEhB,IAAZgB,EAAEhB,OACxEiB,EAAiBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASV,QAASU,EAAEV,SAAcU,EAAEnB,OAGjF,OACI,sBAAKC,UAAWC,IAAEY,QAAlB,UACI,qBAAKb,UAAWC,IAAEkB,YAAlB,SACKP,IAEL,sBAAKZ,UAAWC,IAAEgB,SAAlB,UACKD,EACD,8BAII,cAAC,IAAD,CACII,cAAe,CAAEC,WAAY,IAC7BC,SAAUC,IAEVC,SA5BE,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cAEzB7B,EAAM8B,gBAAgBF,EAAOJ,YAC7BK,GAAc,IAqBN,SAMK,gBAAGD,EAAH,EAAGA,OACAG,EADH,EACGA,OACAC,EAFH,EAEGA,QACAC,EAHH,EAGGA,aACAC,EAJH,EAIGA,WACAC,EALH,EAKGA,aACAC,EANH,EAMGA,aANH,OAOG,eAAC,IAAD,CAAMT,SAAUQ,EAAhB,UACI,cAAC,IAAD,CAAQhC,UAAW4B,EAAOP,YAAcQ,EAAQR,WAAapB,IAAEiC,UAAY,GAAIC,UAAU,WAAWC,SAAUN,EAAcO,OAAQN,EACnIO,YAAY,qBAAqBhC,KAAK,aAAaiC,MAAOd,EAAOe,WAEjEZ,EAAOP,YAAcQ,EAAQR,YAAc,qBAAKrB,UAAWC,IAAEwC,MAAlB,SAA0Bb,EAAOP,aAC7E,8BACI,wBAAQqB,KAAK,SAASC,SAAUV,EAAhC,4C,gBCxCrBW,sBACXC,aAjBc,SAACnC,GACnB,MAAO,CACHC,aAAcD,EAAMC,iBAID,SAACmC,GACpB,MAAM,CACFnB,gBAAiB,SAACN,GACdyB,EAASC,YAA6B1B,SAS9C2B,IAFWJ,CAGbnC","file":"static/js/3.8e348e48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__3rGgk\",\"dialogsItem\":\"Dialog_dialogsItem__2TzQl\",\"dialog\":\"Dialog_dialog__2SC7U\",\"active\":\"Dialog_active__1hSZH\",\"messages\":\"Dialog_messages__KECA7\",\"error\":\"Dialog_error__UirOf\",\"errorform\":\"Dialog_errorform__G8zF7\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialog.module.css'\r\n\r\nconst DialogItem =(props)=>{\r\n    let path = \"/dialog/\"+props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n                    <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialog.module.css'\r\n\r\n\r\n\r\nconst Message =(props)=>{\r\n    return(\r\n        <div className={s.dialog}>\r\n                   {props.message} \r\n                </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialog.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './MessageItem/MessageItem';\r\nimport { Formik, Form, Field } from 'formik';\r\n\r\nimport {validateForm } from './../../utils/validators/validators';\r\n\r\n{/*const validateForm = values => {\r\n    const errors = {};\r\n    if (values.newMessage.length > 50) {\r\n        errors.newMessage = 'Please write maximum 50 simbols';\r\n    } else if (\r\n        values.newMessage.length < 1\r\n    ) {\r\n        errors.newMessage = 'You can not send an empty message'\r\n    }\r\n    return errors;\r\n}*/}\r\n\r\nconst Dialog = (props) => {\r\n\r\n    const addNewMessage = (values, { setSubmitting }) => {\r\n     \r\n            props.sendMessageBody(values.newMessage)\r\n            setSubmitting(false);\r\n       \r\n    }\r\n\r\n    let state = props.messagesPage;\r\n\r\n    let dialogElement = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n    let messageElement = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n    \r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElement}\r\n                <div>\r\n\r\n\r\n\r\n                    <Formik\r\n                        initialValues={{ newMessage: '' }}\r\n                        validate={validateForm}\r\n                        \r\n                        onSubmit={addNewMessage}\r\n                    >\r\n                        {({ values,\r\n                            errors,\r\n                            touched,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            handleSubmit,\r\n                            isSubmitting }) => (\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <Field  className={errors.newMessage && touched.newMessage ? s.errorform : \"\"} component=\"textarea\" onChange={handleChange} onBlur={handleBlur}\r\n                                 placeholder=\"Write your message\" name=\"newMessage\" value={values.textarea}/>\r\n                                \r\n                                {errors.newMessage && touched.newMessage && <div className={s.error}>{errors.newMessage}</div>}\r\n                                <div>\r\n                                    <button type=\"submit\" disabled={isSubmitting}>\r\n                                        Send messages\r\n                                    </button>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessageBodyActionCreator} from '../../redux/dialogReducer';\r\nimport Dialog from './Dialog';\r\n\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\n\r\nlet mapSetToProps=(state)=>{\r\nreturn {\r\n    messagesPage: state.messagesPage,\r\n}\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        sendMessageBody: (newMessage) => {\r\n            dispatch(sendMessageBodyActionCreator(newMessage))\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapSetToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialog)"],"sourceRoot":""}