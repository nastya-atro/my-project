{"version":3,"sources":["components/Dialog/Dialog.module.css","components/Dialog/DialogItem/DialogItem.jsx","components/Dialog/MessageItem/MessageItem.jsx","utils/validators/validators.js","components/Dialog/Dialog.jsx","components/Dialog/DialogContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","src","photo","name","Message","dialogMessage","dialog_topItem","time","doalog_bottomItem","message","validateForm","values","errors","newMessage","length","Dialog","state","messagesPage","dialogElement","dialogs","map","d","messageElement","messages","m","dialogsItem","initialValues","validate","onSubmit","setSubmitting","sendMessageBody","touched","handleChange","handleBlur","handleSubmit","isSubmitting","messageForm","errorform","component","onChange","onBlur","placeholder","value","textarea","error","messageButton","type","disabled","compose","connect","dispatch","sendMessageBodyActionCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,YAAc,4BAA4B,QAAU,wBAAwB,OAAS,uBAAuB,cAAgB,8BAA8B,eAAiB,+BAA+B,kBAAoB,kCAAkC,YAAc,4BAA4B,cAAgB,8BAA8B,MAAQ,wB,iGCe/ZC,EAZG,SAACC,GACf,IAAIC,EAAO,WAAWD,EAAME,GAC5B,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACY,eAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAEI,OAAtC,UACA,qBAAKC,IAAKT,EAAMU,QACjB,sBAAKP,UAAWC,IAAEO,KAAlB,cAA0BX,EAAMW,cCYpCC,EAjBC,SAACZ,GACb,OACI,sBAAKG,UAAWC,IAAES,cAAlB,UACI,sBAAKV,UAAWC,IAAEU,eAAlB,UACI,8BAAMd,EAAMW,OACZ,8BAAK,qBAAKF,IAAKT,EAAMU,UACrB,8BAAMV,EAAMe,UAIhB,sBAAKZ,UAAWC,IAAEY,kBAAlB,UAAsChB,EAAMiB,QAA5C,W,OCbL,IAAMC,EAAe,SAAAC,GACxB,IAAMC,EAAS,GAQf,OAPKD,EAAOE,WAGRF,EAAOE,WAAWC,OAAO,KAE3BF,EAAOC,WAAa,2CAJpBD,EAAOC,WAAa,WAMfD,GC2EIG,EAlEA,SAACvB,GAEZ,IAOIwB,EAAQxB,EAAMyB,aAEdC,EAAgBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBT,GAAI2B,EAAE3B,GAAIQ,MAAOmB,EAAEnB,OAAzBmB,EAAE3B,OACxE4B,EAAiBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,MAAOsB,EAAEtB,MAAOC,KAAMqB,EAAErB,KAAMI,KAAMiB,EAAEjB,KAAME,QAASe,EAAEf,SAAce,EAAE9B,OAG7H,OACI,sBAAKC,UAAWC,IAAEuB,QAAlB,UACI,qBAAKxB,UAAWC,IAAE6B,YAAlB,SACKP,IAEL,sBAAKvB,UAAWC,IAAE2B,SAAlB,UACKD,EACD,8BAII,cAAC,IAAD,CACII,cAAe,CAAEb,WAAY,IAC7Bc,SAAUjB,EAEVkB,SA5BE,SAACjB,EAAD,GAAgC,IAArBkB,EAAoB,EAApBA,cAEzBrC,EAAMsC,gBAAgBnB,EAAOE,YAC7BgB,GAAc,IAqBN,SAMK,gBAAGlB,EAAH,EAAGA,OACAC,EADH,EACGA,OACAmB,EAFH,EAEGA,QACAC,EAHH,EAGGA,aACAC,EAJH,EAIGA,WACAC,EALH,EAKGA,aACAC,EANH,EAMGA,aANH,OAOO,qBAAKxC,UAAWC,IAAEwC,YAAlB,SACK,eAAC,IAAD,CAAMR,SAAUM,EAAhB,UACL,cAAC,IAAD,CAAQvC,UAAWiB,EAAOC,YAAckB,EAAQlB,WAAajB,IAAEyC,UAAY,GAAIC,UAAU,WAAWC,SAAUP,EAAcQ,OAAQP,EACnIQ,YAAY,qBAAqBtC,KAAK,aAAauC,MAAO/B,EAAOgC,WAEjE/B,EAAOC,YAAckB,EAAQlB,YAAc,qBAAKlB,UAAWC,IAAEgD,MAAlB,SAA0BhC,EAAOC,aAC7E,qBAAKlB,UAAWC,IAAEiD,cAAlB,SACI,wBAAQC,KAAK,SAASC,SAAUZ,EAAhC,8C,gBCzCrBa,sBACXC,aAjBc,SAACjC,GACnB,MAAO,CACHC,aAAcD,EAAMC,iBAID,SAACiC,GACpB,MAAM,CACFpB,gBAAiB,SAACjB,GACdqC,EAASC,YAA6BtC,SAS9CuC,IAFWJ,CAGbjC","file":"static/js/3.5bde53e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2SC7U\",\"name\":\"Dialog_name__1r7Kx\",\"dialogsItem\":\"Dialog_dialogsItem__2TzQl\",\"dialogs\":\"Dialog_dialogs__3rGgk\",\"active\":\"Dialog_active__1hSZH\",\"dialogMessage\":\"Dialog_dialogMessage__-WhI-\",\"dialog_topItem\":\"Dialog_dialog_topItem__1i25G\",\"doalog_bottomItem\":\"Dialog_doalog_bottomItem__1Qd0Z\",\"messageForm\":\"Dialog_messageForm__2VBTX\",\"messageButton\":\"Dialog_messageButton__1WI_q\",\"error\":\"Dialog_error__UirOf\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialog.module.css'\r\n\r\nconst DialogItem =(props)=>{\r\n    let path = \"/dialog/\"+props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n                    <NavLink to={path} activeClassName={s.active}>\r\n                    <img src={props.photo}></img>\r\n                   <div className={s.name}> {props.name}</div>\r\n                    </NavLink>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialog.module.css'\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.dialogMessage}>\r\n            <div className={s.dialog_topItem}>\r\n                <div>{props.name}</div>\r\n                <div><img src={props.photo}></img></div>\r\n                <div>{props.time}</div>\r\n            </div>\r\n\r\n\r\n            <div className={s.doalog_bottomItem}>{props.message} </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\n\r\nexport const validateForm = values => {\r\n    const errors = {};\r\n    if (!values.newMessage) {\r\n      errors.newMessage = 'Required';\r\n    } else if (\r\n        values.newMessage.length>50\r\n    ) {\r\n      errors.newMessage = 'Please, dont write more then 50 sumbols';\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  export const required =  values=>{\r\n    const errors = {};\r\n    if (!values) {\r\n      errors = 'Required';\r\n    } \r\n    return errors;\r\n  }\r\n\r\n  export const maxLength=(maxLength)=>(values)=>{\r\n    const errors = {};\r\n    if (\r\n        values.length < maxLength\r\n    ) {\r\n      errors = `Write more then ${maxLength} sumbols`;\r\n    }\r\n    return errors;\r\n  }","import React from 'react';\r\nimport s from './Dialog.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './MessageItem/MessageItem';\r\nimport { Formik, Form, Field } from 'formik';\r\n\r\nimport {validateForm } from './../../utils/validators/validators';\r\n\r\n{/*const validateForm = values => {\r\n    const errors = {};\r\n    if (values.newMessage.length > 50) {\r\n        errors.newMessage = 'Please write maximum 50 simbols';\r\n    } else if (\r\n        values.newMessage.length < 1\r\n    ) {\r\n        errors.newMessage = 'You can not send an empty message'\r\n    }\r\n    return errors;\r\n}*/}\r\n\r\nconst Dialog = (props) => {\r\n\r\n    const addNewMessage = (values, { setSubmitting }) => {\r\n     \r\n            props.sendMessageBody(values.newMessage)\r\n            setSubmitting(false);\r\n       \r\n    }\r\n\r\n    let state = props.messagesPage;\r\n\r\n    let dialogElement = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} photo={d.photo} />)\r\n    let messageElement = state.messages.map(m => <Message photo={m.photo} name={m.name} time={m.time} message={m.message} key={m.id} />)\r\n    \r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogElement} \r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElement}\r\n                <div>\r\n\r\n\r\n\r\n                    <Formik\r\n                        initialValues={{ newMessage: '' }}\r\n                        validate={validateForm}\r\n                        \r\n                        onSubmit={addNewMessage}\r\n                    >\r\n                        {({ values,\r\n                            errors,\r\n                            touched,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            handleSubmit,\r\n                            isSubmitting }) => (\r\n                                <div className={s.messageForm}>\r\n                                     <Form onSubmit={handleSubmit}>\r\n                                <Field  className={errors.newMessage && touched.newMessage ? s.errorform : \"\"} component=\"textarea\" onChange={handleChange} onBlur={handleBlur}\r\n                                 placeholder=\"Write your message\" name=\"newMessage\" value={values.textarea}/>\r\n                                \r\n                                {errors.newMessage && touched.newMessage && <div className={s.error}>{errors.newMessage}</div>}\r\n                                <div className={s.messageButton}>\r\n                                    <button type=\"submit\" disabled={isSubmitting}>\r\n                                        Send messages\r\n                                    </button>\r\n                                </div>\r\n                            </Form>\r\n                                </div>\r\n                           \r\n                        )}\r\n                    </Formik>\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessageBodyActionCreator} from '../../redux/dialogReducer';\r\nimport Dialog from './Dialog';\r\n\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\n\r\nlet mapSetToProps=(state)=>{\r\nreturn {\r\n    messagesPage: state.messagesPage,\r\n}\r\n}\r\n\r\nlet mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        sendMessageBody: (newMessage) => {\r\n            dispatch(sendMessageBodyActionCreator(newMessage))\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapSetToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialog)"],"sourceRoot":""}