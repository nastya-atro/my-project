{"version":3,"sources":["webSocket_pages/chat/ChatPages.module.css","webSocket_pages/chat/ChatPages.tsx"],"names":["module","exports","Chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","className","s","chatPage","Messages","FormMessageBlock","messages","useSelector","state","chat","messagesAncorRef","useRef","useState","isAutoScroll","setAutoScroll","messageElement","map","m","index","Message","message","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","React","memo","imgUser","src","photo","userName","setMessages","status","value","onChange","disabled","onClick","sendMessage","ChatPage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,SAAW,4BAA4B,QAAU,6B,6GCoB7DC,EAAiB,WACnB,IAAIC,EAAWC,cASf,OARAC,qBAAU,WAGN,OADAF,EAASG,eACF,WACHH,EAASI,kBAEd,IAGC,sBAAKC,UAAWC,IAAEC,SAAlB,UACI,6CACA,cAACC,EAAD,IACA,cAACC,EAAD,QAOND,EAAqB,WACvB,IAAME,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAC3DI,EAAmBC,iBAAuB,MAFnB,EAGSC,oBAAS,GAHlB,mBAGtBC,EAHsB,KAGRC,EAHQ,KAMzBC,EAAiBT,EAASU,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAqBC,QAASH,GAAhBC,MAoB9D,OAVApB,qBAAU,WAEa,IAAD,EAAde,IACA,UAAAH,EAAiBW,eAAjB,SAA0BC,eAAe,CAAEC,SAAU,cAG1D,CAACjB,IAKA,sBAAKkB,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SApBlC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EtB,GAAgBC,GAAc,GAE/BD,GAAgBC,GAAc,IAelC,UACKC,EACD,qBAAKqB,IAAK1B,QAMhBS,EAAmDkB,IAAMC,MAAK,YAAkB,IAAflB,EAAc,EAAdA,QACnE,OACI,gCACI,qBAAKnB,UAAWC,IAAEqC,QAAlB,SAA2B,qBAAKC,IAAKpB,EAAQqB,UAC7C,8BAAMrB,EAAQsB,WACd,8BAAMtB,EAAQA,gBAKpBf,EAA6B,WAAO,IAAD,EACNO,mBAAS,IADH,mBAC9BQ,EAD8B,KACrBuB,EADqB,KAE/BC,EAASrC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKmC,UAE3DhD,EAAWC,cAUf,OACI,gCACI,8BAAK,0BAAUgD,MAAOzB,EAAS0B,SAAU,SAAClB,GAAD,OAAOe,EAAYf,EAAEE,cAAce,YAC5E,8BAAK,wBAAQE,SAAqB,UAAXH,EAAoBI,QAX9B,WACZ5B,IAGLxB,EAASqD,YAAY7B,IACrBuB,EAAY,MAMH,wBAOFO,UAjGY,WACvB,OACI,cAACvD,EAAD","file":"static/js/4.92627d35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPage\":\"ChatPages_chatPage__1aX-z\",\"imgUser\":\"ChatPages_imgUser__Vjvm_\"};","import React, { useEffect, useRef, useState } from 'react';\r\nimport s from './ChatPages.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startMessagesListening, stopMessagesListening, sendMessage } from './../../redux/chatWebSocketReducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\ntype ChatMessagesType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <Chat />\r\n    )\r\n}\r\n\r\n\r\nconst Chat: React.FC = () => {\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={s.chatPage}>\r\n            <h3>Chat online</h3>\r\n            <Messages />\r\n            <FormMessageBlock />\r\n        </div>)\r\n}\r\n\r\n\r\n\r\n\r\nconst Messages: React.FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAncorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setAutoScroll] = useState(true)\r\n\r\n\r\n    let messageElement = messages.map((m, index) => <Message key={index} message={m} />)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (isAutoScroll) {\r\n            messagesAncorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n\r\n    }, [messages])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ height: '500px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n            {messageElement}\r\n            <div ref={messagesAncorRef}></div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessagesType }> = React.memo(({ message }) => {\r\n    return (\r\n        <div>\r\n            <div className={s.imgUser}><img src={message.photo}></img></div>\r\n            <div>{message.userName}</div>\r\n            <div>{message.message}</div>\r\n        </div>)\r\n\r\n})\r\n\r\nconst FormMessageBlock: React.FC = () => {\r\n    const [message, setMessages] = useState('')\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const sendMessages = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessages('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div><textarea value={message} onChange={(e) => setMessages(e.currentTarget.value)} /></div>\r\n            <div><button disabled={status !== 'ready'} onClick={sendMessages}>Send</button></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ChatPage"],"sourceRoot":""}