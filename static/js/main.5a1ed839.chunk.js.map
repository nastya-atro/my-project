{"version":3,"sources":["reportWebVitals.js","api/api.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","api/usersApi.ts","api/profileApi.ts","redux/profileReducer.ts","redux/sidebarReducer.ts","redux/usersReducer.ts","api/authApi.ts","api/captchaApi.ts","redux/authReducer.ts","redux/appReducer.ts","redux/friendPageReducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","assets/images/spinner.gif","components/common/preloader/Preloader.tsx","components/Profile/Profileinfo/StatusHook.tsx","components/Profile/Profileinfo/ProfileForm.tsx","components/Profile/Profileinfo/ProfileFormChange.tsx","components/Profile/Profileinfo/Profileinfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","assets/images/logo.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginPage.tsx","components/Footer/Footer.tsx","components/Footer/FooterContainer.tsx","components/common/Paginator/Paginator.tsx","components/FreindPage/FriendPage.tsx","components/FreindPage/FriendPageContainer.tsx","redux/usersSelector.tsx","components/Users/SearchFilter.tsx","components/Users/UseR.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","index.tsx","components/Navbar/Navbar.module.css","components/Profile/Profileinfo/ProfileForm.module.css","components/Users/Users.module.css","components/Profile/Profileinfo/Profileinfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/FreindPage/FriendPage.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Login/LoginPage.module.css","components/Profile/Profileinfo/ProfileFormChange.module.css","components/Footer/Footer.module.css","components/common/Paginator/Paginator.module.css","redux/dialogReducer.ts","components/common/preloader/Preloader.module.css","assets/images/user.png"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ResultCodeEnum","ResultCodeEnumWithCaptcha","Navbar","className","s","nav","item","to","activeClassName","active","Music","Setting","instanse","axios","create","withCredentials","headers","baseURL","usersApi","getUsers","currentPage","pageSize","term","friend","get","response","data","getFollowedUsers","postFollow","id","post","res","deleteFollow","delete","getProfile","userId","profileApi","status","put","photos","formData","FormData","append","profile","initialState","posts","message","likesNumber","actions","newPostText","type","dispatch","a","profileReducer","state","action","newPost","filter","p","sidebarReducer","users","totalUsersCount","isfetcing","followingInProgress","totalCount","items","followUnfollowChange","apiMethod","actionCreator","resultCode","Success","unfollow","bind","usersReducer","map","u","followed","authApi","email","password","rememberMe","captcha","captchaApi","login","isAuth","payload","getLogin","getCaptcha","urlCaptcha","url","authReducer","isInitialised","appReducer","totalFriendCount","page","friendPageReducer","rootReducer","combineReducers","profilePage","messagesPage","dialogReducer","sidebar","usersPage","friendPage","auth","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Component","Preloader","preloader_wrapper","src","preloader","alt","StatusHook","props","useState","editMode","setEditMode","setStatus","useEffect","onClick","status_input","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","Contact","contactTitle","contactValue","ProfileForm","form_block_name_status","fullName","form_block_job_contacts","isOwner","button_edit","changeEditMode","aboutMe","job","lookingForAJob","lookingForAJobDescription","contacts","Object","keys","key","ProfileFormChange","initialValues","onSubmit","saveForm","values","handleSubmit","errors","touched","handleChange","handleBlur","isSubmitting","formChange_wrapper","name","placeholder","buttonSave","disabled","ProfileInfo","description","backgroundImg","editPhoto_Wrapper","large","UserPhoto","photo","editPhoto","editPhoto_input","target","files","length","putPhotos","editPhoto_label","htmlFor","form_wrapper","setSubmitting","changeProfile","Post","postBlock","postBlock_img","img","small","UserImg","time","Date","toLocaleDateString","postBlock_post","postBlock_likes","validateForm","MyPosts","useSelector","useDispatch","postElement","el","postsBlock","validate","inputPostBlock","inputPost","component","error","buttonPost","MyPostsContainer","Profile","authUserId","getStatusCallback","getStatus","history","useHistory","adress","location","pathname","Number","substring","updateProfile","push","getProfileCallback","getState","ProfileContainer","Header","header","Logo","loginBlock","loginBlock_logout","userImg","buttonLogout","logout","buttonLogin","HeaderContainer","this","React","connect","test","LoginPage","login_wrapper","checkbox","onSubmitProps","CaptchaIsRequired","isValid","loginForm","Footer","footer","footer_contacts","FooterContainer","Paginator","totalItemCount","onPageChanged","portionSize","pageNumber","Math","ceil","i","portionCount","numberPortion","setnumberPortion","leftPortionPageNumber","rightPortionPageNumber","paginator","cn","activePage","FriendPage","friendsPage_wrapper","changePageFriends","friendPage_flex","friend_info","friend_info_name","friend_info_status","friendButtonMessage","friendButtonFollow","FriendPageContainer","getFollowedUserThunk","prevProps","selectorUsers","selectorPageSize","selectorTotalUsersCount","selectorCurrentPage","selectorIsfetcing","selectorFollowingInProgress","selectorTerm","selectorFriend","SearchFilter","memo","enableReinitialize","String","searchUsers","as","UseR","user","follow","user_wrapper","user_photo","userPhto","user_name","user_button","user_buttonUnfollow","some","user_buttonFollow","Users","parsed","require","parse","search","actualCurrentPage","actualTerm","actualFriend","queryString","stringify","followUser","unfollowUser","users_wrapper","UsersPage","SuspenseDialog","lazy","fallback","App","initializeApp","exact","path","render","AppContainer","withRouter","promise","Promise","all","MainApp","basename","process","ReactDOM","document","getElementById","module","exports","dialogs","messages","sendMessageBody","newMessage","body"],"mappings":"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","file":"static/js/main.5a1ed839.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\n\r\nexport const instanse = axios.create({\r\n    withCredentials: true,\r\n    headers: { \"API-KEY\": \"e33a9b28-32d1-4022-81b8-0bd4ba992caa\" },\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success =0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeEnumWithCaptcha{\r\n    CaptchaIsRequired=10\r\n}\r\nexport type ResponseType<D={}, RC=ResultCodeEnum>={\r\n    resultCode: RC\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>\r\n                    <i className=\"fas fa-house-user\"></i>\r\n                    <div>Profile</div>\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>\r\n                    <i className=\"fas fa-users\"></i>\r\n                    <div>Users</div></NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/friendpage\" activeClassName={s.active}>\r\n                    <i className=\"fas fa-smile\"></i>\r\n                    <div>My Friends</div></NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"/dialog\" activeClassName={s.active}>\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    <div>Messages</div></NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}>\r\n                    <i className=\"fas fa-headphones-alt\"></i>\r\n                    <div>Music</div></NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/setting\" activeClassName={s.active}>\r\n                    <i className=\"fas fa-sliders-h\"></i>\r\n                    <div>Setting</div></NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Music = ()=>{\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\n\r\nconst Setting= ()=>{\r\n    return(\r\n        <div>\r\n            Setting \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting ;","import { ResponseType } from 'axios';\r\nimport { UserType, ProfileType } from '../types/types';\r\nimport { instanse} from './api';\r\n\r\ntype GetUsersType={\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage:number, pageSize:number, term:string, friend: null|boolean=null) {\r\n        return instanse.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+ (friend===null ? '':`&friend=${friend}`))\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getFollowedUsers(currentPage:number, pageSize:number, friend:boolean) {\r\n        return instanse.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&friend=${friend}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    postFollow(id:number) {\r\n        return instanse.post<ResponseType>(`follow/${id}`, {})\r\n        .then(res=>res.data)\r\n    },\r\n\r\n    deleteFollow(id:number) {\r\n        return instanse.delete<ResponseType>(`follow/${id}`)\r\n        .then(res=>res.data)\r\n    },\r\n    getProfile(userId:number |null) {\r\n        return instanse.get<ProfileType>(`profile/` + userId)\r\n        .then(res=>res.data)\r\n    }\r\n}","import { PhotosType, ProfileType } from \"../types/types\"\r\nimport { instanse, ResponseType} from \"./api\"\r\n\r\ntype PutPhotosTypeData={\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getStatus(userId:number) {\r\n        return instanse.get(`profile/status/` + userId)\r\n        .then(res=>res.data)\r\n    },\r\n    updateStatus(status:string) {\r\n        return instanse.put<ResponseType>(`profile/status`, { status: status })\r\n        .then(res=>res.data)\r\n    },\r\n    putPhotos(photos: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photos)\r\n        return instanse.put<ResponseType<PutPhotosTypeData>>(`profile/photo`, formData, {\r\n            headers: { 'Content-Type': 'multipart/form-data' }\r\n        })\r\n        .then(res=>res.data)\r\n    },\r\n    changeProfile(profile: ProfileType) {\r\n        return instanse.put<ResponseType>(`profile`, profile)\r\n        .then(res=>res.data)\r\n    }\r\n}\r\n\r\n","import { ResultCodeEnum} from \"../api/api\";\r\nimport { PostsType } from './../types/types'\r\nimport { ProfileType } from './../types/types'\r\nimport { PhotosType } from './../types/types'\r\nimport { CommonActionsTypes, CommonThunkType } from \"./redux-store\";\r\nimport { usersApi } from './../api/usersApi';\r\nimport { profileApi } from './../api/profileApi';\r\n \r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat.', likesNumber: 22 },\r\n\r\n        { id: 2, message: 'Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? ', likesNumber: '18' },\r\n        { id: 3, message: 'Nothing, everything, anything, something: if you have nothing, then you have everything, because you have the freedom to do anything, without the fear of losing something.', likesNumber: '18' },\r\n    ] as Array<PostsType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"profile/ADD-POST\":\r\n            let newPost = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likesNumber: 0\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n\r\n        case \"profile/SET_USER_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n        case \"profile/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        case \"profile/DEL_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.id)\r\n            }\r\n        case \"profile/PUT_PHOTO\":\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.photos } as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions={\r\n    addPost: (newPostText: string) => ({ type: 'profile/ADD-POST', newPostText } as const),\r\n    deletePostActionCreator: (id: number) => ({\r\n        type: 'profile/DEL_POST', id\r\n    } as const),\r\n    setUserProfile:(profile: ProfileType)=> ({\r\n        type: 'profile/SET_USER_PROFILE', profile\r\n    } as const),\r\n    setStatus: (status: string) => ({\r\n        type: 'profile/SET_STATUS', status\r\n    } as const),\r\n    putPhotoSuccess: (photos: PhotosType) => ({\r\n        type: 'profile/PUT_PHOTO', photos\r\n    } as const),\r\n}\r\n\r\ntype ActionsTypes =CommonActionsTypes<typeof actions>\r\ntype ThunkType= CommonThunkType<ActionsTypes>\r\n\r\nexport const getProfile = (userId: number |null):ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await usersApi.getProfile(userId)\r\n        dispatch(actions.setUserProfile(data))\r\n    }\r\n}\r\nexport const getStatus = (userId: number):ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await profileApi.getStatus(userId)\r\n        dispatch(actions.setStatus(data))\r\n    }\r\n}\r\nexport const updateStatus = (status: string):ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await profileApi.updateStatus(status)\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    }\r\n}\r\nexport const putPhotos = (photos: PhotosType):ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await profileApi.putPhotos(photos)\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(actions.putPhotoSuccess(data.data.photos))\r\n        }\r\n    }\r\n}\r\nexport const changeProfile = (profile: ProfileType):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const userId = getState().auth.id\r\n        const data = await profileApi.changeProfile(profile)\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getProfile(userId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n","let initialState ={}\r\n\r\nconst sidebarReducer=(state=initialState, action:any)=>{\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer;","import { Dispatch } from \"react\";\r\nimport { ResultCodeEnum } from \"../api/api\";\r\nimport { UserType } from \"../types/types\";\r\nimport { CommonActionsTypes, CommonThunkType } from \"./redux-store\";\r\nimport { usersApi } from './../api/usersApi';\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 48,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isfetcing: true,\r\n    followingInProgress: [] as Array<number>, //array of users id\r\n    term: '',\r\n    friend: null as null | boolean\r\n};\r\n \r\ntype InitialStateType = typeof initialState;\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'SET_USERS':\r\n            {\r\n                return {\r\n                    ...state, users: action.users\r\n                }\r\n            }\r\n        case 'SET_CURRENT_PAGE':\r\n            {\r\n                return {\r\n                    ...state, currentPage: action.currentPage\r\n                }\r\n            }\r\n        case 'SET_TOTAL_CURRENT':\r\n            {\r\n                return {\r\n                    ...state, totalUsersCount: action.totalCount\r\n                }\r\n            }\r\n        case 'TOOGLE_IS_FETCING':\r\n            {\r\n                return {\r\n                    ...state, isfetcing: action.isfetcing\r\n                }\r\n            }\r\n        case 'TOOGLE_IS_FOLLOWING_PROGRESS':\r\n            {\r\n                return {\r\n                    ...state,\r\n                    followingInProgress: action.isfetcing ?\r\n                        [...state.followingInProgress, action.userId] :\r\n                        state.followingInProgress.filter(id => id !== action.userId)\r\n                }\r\n            }\r\n\r\n        case 'SEARCH_USERS':{\r\n            return {\r\n                ...state, \r\n                term: action.term,\r\n                friend: action.friend\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n    unfollowSuccess: (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n    setUsers: (users: Array<UserType>) => ({ type: 'SET_USERS', users } as const),\r\n    setCurrentPage: (currentPage: number) => ({ type: 'SET_CURRENT_PAGE', currentPage } as const),\r\n    setTotalCount: (totalCount: number) => ({ type: 'SET_TOTAL_CURRENT', totalCount } as const),\r\n    toogleIsFetcing: (isfetcing: boolean) => ({ type: 'TOOGLE_IS_FETCING', isfetcing } as const),\r\n    setSearchUsers:(term: string, friend: null|boolean)=>({type: 'SEARCH_USERS', term, friend}as const),\r\n    tooggleFollowingProgress: (isfetcing: boolean, userId: number) => ({ type: 'TOOGLE_IS_FOLLOWING_PROGRESS', isfetcing, userId } as const)\r\n\r\n}\r\n\r\ntype ActionsTypes = CommonActionsTypes<typeof actions>\r\ntype ThunkType = CommonThunkType<ActionsTypes>\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number, term:string, friend: null|boolean): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toogleIsFetcing(true))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setSearchUsers(term, friend))\r\n        let data = await usersApi.getUsers(currentPage, pageSize, term, friend)\r\n        dispatch(actions.toogleIsFetcing(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalCount(data.totalCount))\r\n    }\r\n}\r\nexport const followUnfollowChange = async (dispatch: Dispatch<ActionsTypes>,\r\n    userId: number,\r\n    apiMethod: any,\r\n    actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.tooggleFollowingProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actionCreator(userId))}\r\n    dispatch(actions.tooggleFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        followUnfollowChange(dispatch, userId, usersApi.postFollow.bind(usersApi), actions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        followUnfollowChange(dispatch, userId, usersApi.deleteFollow.bind(usersApi), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer","import { instanse, ResponseType, ResultCodeEnum, ResultCodeEnumWithCaptcha } from './api';\r\n\r\ntype GetLoginTypeData = {\r\n    id: number, email: string, login: string\r\n}\r\ntype LoginTypeData = {\r\n    userId: number\r\n}\r\nexport const authApi = {\r\n    getLogin() {\r\n        return instanse.get<ResponseType<GetLoginTypeData, ResultCodeEnum | ResultCodeEnumWithCaptcha>>(`auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string | null = null) {\r\n        return instanse.post<ResponseType<LoginTypeData, ResultCodeEnum | ResultCodeEnumWithCaptcha>>(`auth/login`, { email, password, rememberMe, captcha })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instanse.delete<ResponseType>(`auth/login`)\r\n            .then(res => res.data)\r\n    }\r\n}","import { instanse } from \"./api\"\r\n\r\n\r\ntype GetCaptchaType={\r\n    url:string\r\n}\r\nexport const captchaApi = {\r\n    getCaptcha() {\r\n        return instanse.get<GetCaptchaType>(`security/get-captcha-url`)\r\n        .then(res=>res.data)\r\n    }\r\n}","import { ResultCodeEnum, ResultCodeEnumWithCaptcha } from \"../api/api\";\r\nimport { CommonActionsTypes, CommonThunkType } from \"./redux-store\";\r\nimport { authApi } from '../api/authApi';\r\nimport { captchaApi } from \"../api/captchaApi\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET_USER_DATA\":\r\n        case \"auth/GET_CAPTCHA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    setUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'auth/SET_USER_DATA',\r\n        payload: { id, email, login, isAuth }} as const),\r\n    getCaptchaSuccess: (captcha: string) => ({\r\n        type: 'auth/GET_CAPTCHA',\r\n        payload: { captcha }} as const)\r\n}\r\n\r\ntype ActionsTypes=CommonActionsTypes<typeof actions>\r\ntype ThunkType=CommonThunkType<ActionsTypes>\r\n\r\n\r\nexport const getLogin = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await authApi.getLogin()\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            let { id, email, login } = data.data;\r\n            dispatch(actions.setUserData(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await authApi.login(email, password, rememberMe, captcha)\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getLogin())\r\n        } else if (data.resultCode === ResultCodeEnumWithCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptcha())\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => async (dispatch) => {\r\n    const data = await captchaApi.getCaptcha()\r\n    const urlCaptcha = data.url\r\n    dispatch(actions.getCaptchaSuccess(urlCaptcha))\r\n}\r\n\r\nexport const logout = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let data = await authApi.logout()\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import { getLogin } from './authReducer';\r\nimport { CommonActionsTypes, CommonThunkType } from './redux-store';\r\n\r\nlet initialState = {\r\n    isInitialised: false,\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst appReducer = (state:initialStateType= initialState, action: ActionsTypes):initialStateType => {\r\n    switch (action.type) {\r\n        case 'app/INITIALISED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isInitialised: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions={\r\n    initializedSuccess:() => ({\r\n        type: 'app/INITIALISED_SUCCESS'\r\n    }) as const\r\n}\r\n\r\ntype ActionsTypes=CommonActionsTypes<typeof actions>\r\ntype ThunkType= CommonThunkType<ActionsTypes>\r\n\r\nexport const initializeApp = ():ThunkType => async(dispatch) => {\r\n        let promise = await dispatch(getLogin());\r\n        Promise.all([promise])\r\n            dispatch(actions.initializedSuccess()) \r\n    }\r\nexport default appReducer;","import { UserType } from '../types/types';\r\nimport { CommonActionsTypes,  CommonThunkType } from './redux-store';\r\nimport { usersApi } from './../api/usersApi';\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    currentPage: 1,\r\n    pageSize: 5,\r\n    totalFriendCount: 0,\r\n    friend: true,\r\n}\r\n\r\ntype InitialStateType=typeof initialState\r\n\r\nconst friendPageReducer = (state:InitialStateType = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'friendPage/GET_FOLLOWED_USER':\r\n            {\r\n                return {\r\n                    ...state, users: action.users\r\n                }\r\n            }\r\n        case 'friendPage/SER_TOTAL_FRIEND_COUNT': {\r\n            return {\r\n                ...state, totalFriendCount: action.totalFriendCount\r\n            }\r\n        }\r\n        case 'friendPage/CHANGE_PAGE': {\r\n            return {\r\n                ...state, currentPage: action.page\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions={\r\n    getFollowedUserAC: (users: Array<UserType>) => ({\r\n        type: 'friendPage/GET_FOLLOWED_USER', users\r\n    } as const),\r\n    \r\n    setTotalFriendCount: (totalFriendCount:number) => ({\r\n        type: 'friendPage/SER_TOTAL_FRIEND_COUNT', totalFriendCount\r\n    }as const),\r\n    \r\n    changePage: (page:number) => ({\r\n        type: 'friendPage/CHANGE_PAGE', page\r\n    }as const)\r\n}\r\n\r\ntype ActionsTypes= CommonActionsTypes<typeof actions>\r\ntype ThunkType= CommonThunkType<ActionsTypes>\r\n\r\nexport const getFollowedUserThunk = (page:number, pageSize:number, friend:boolean):ThunkType =>{\r\n    return async (dispatch) => {\r\n        dispatch(actions.changePage(page))\r\n        let data = await usersApi.getFollowedUsers(page, pageSize, friend)\r\n        dispatch(actions.getFollowedUserAC(data.items))\r\n        dispatch(actions.setTotalFriendCount(data.totalCount))\r\n        \r\n    }\r\n}\r\n\r\nexport default friendPageReducer","import { applyMiddleware, combineReducers, createStore, compose, Action } from \"redux\";\r\nimport dialogReducer from \"./dialogReducer\";\r\nimport profileReducer from './profileReducer';\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\"\r\nimport appReducer from './appReducer';\r\nimport authReducer from './authReducer';\r\nimport friendPageReducer from './friendPageReducer';\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: dialogReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  friendPage: friendPageReducer,\r\n  auth: authReducer,\r\n  app: appReducer \r\n  \r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type CommonActionsTypes<T> = T extends {[key: string]:(...args:any[])=> infer U }?U:never\r\n\r\nexport type CommonThunkType<A extends Action>= ThunkAction<Promise<void>, AppStateType, unknown, A>\r\n\r\n\r\n\r\n//Extentions from Redux DevTools for Chrome\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n//@ts-ignore\r\nwindow.__store__ = store;\r\n\r\n\r\n//Without extensions:\r\n//let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n//window.store= store;\r\n\r\nexport default store;","import React from 'react';\r\nimport { Suspense } from 'react';\r\n\r\nexport function withSuspense<WCP> (Component:React.ComponentType<WCP>){\r\n  return (props:WCP) => {\r\n    return <Suspense fallback={<div>Загрузка...</div>}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  }\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/spinner.8a848a67.gif\";","import React from 'react';\r\nimport preloader from './../../../assets/images/spinner.gif'\r\nimport s from './Preloader.module.css'\r\n\r\nlet Preloader = ()=>{\r\n    return (\r\n        <div className={s.preloader_wrapper}><img src={preloader} alt=\"description\"/></div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport s from './ProfileForm.module.css'\r\n\r\n\r\ntype PropsTypes={\r\n    status:string\r\n    updateStatus:(status: string)=>void\r\n}\r\n\r\nconst StatusHook:React.FC<PropsTypes> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    \r\n    useEffect(() => {\r\n        setStatus(props.status)},\r\n        [props.status]);\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    let onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onClick={activateEditMode}>{props.status || '----'}</span>\r\n                </div>}\r\n            {editMode &&\r\n                <div className={s.status_input}>\r\n                    <input type='text' onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusHook","import React from 'react';\r\nimport StatusHook from './StatusHook';\r\nimport s from './ProfileForm.module.css'\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\n\r\ntype PropsTypes={\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus:(status: string)=>void\r\n    isOwner:boolean\r\n    changeEditMode:()=>void\r\n\r\n}\r\n\r\nconst ProfileForm:React.FC<PropsTypes> = (props) => {\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <div className={s.form_block_name_status}>\r\n                    <div className={s.fullName}>{props.profile.fullName}</div>\r\n                    <div className={s.status}>\r\n                        <StatusHook status={props.status} updateStatus={props.updateStatus} />\r\n                    </div>\r\n                </div>\r\n                <div className={s.form_block_job_contacts}>\r\n                    {props.isOwner &&\r\n                        <button className={s.button_edit} onClick={props.changeEditMode}>Edit profile</button>\r\n                    }\r\n                    <div className={s.aboutMe}>\r\n                        <h3>About me:</h3>\r\n                        {props.profile.aboutMe || '--'}\r\n                    </div>\r\n                    <div className={s.job}>\r\n                        <h3>Info for my job:</h3>\r\n                        <div> <b>Searching a job:</b>{props.profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n                        <div><b>Professional skils:</b>{props.profile.lookingForAJobDescription}</div>\r\n                    </div>\r\n                    <div className={s.contacts}><h3>My contacts:</h3>\r\n                        {Object.keys(props.profile.contacts as ContactsType).map(key => {\r\n                            return <Contact key={key} contactTitle={key} \r\n                            contactValue={!props.profile.contacts?'-': props.profile.contacts[key as keyof ContactsType]} />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\ntype ContactPropsType={\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact:React.FC<ContactPropsType> = ({ contactTitle, contactValue })=> {\r\n    return <div><b>{contactTitle}</b> {contactValue || \"-\"} </div>\r\n}\r\n\r\n\r\nexport default ProfileForm","import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport s from './ProfileFormChange.module.css'\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\n\r\ntype PropsTypes={\r\n    profile: ProfileType\r\n    saveForm:(values: any, { setSubmitting }: { setSubmitting: any; })=>void\r\n}\r\n\r\n\r\n\r\nconst ProfileFormChange:React.FC<PropsTypes> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    fullName: props.profile.fullName,\r\n                    lookingForAJobDescription: props.profile.lookingForAJobDescription || '--',\r\n                    aboutMe: props.profile.aboutMe\r\n                }}\r\n                onSubmit={props.saveForm}\r\n            >\r\n                {({ values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isSubmitting }) => (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <div className={s.formChange_wrapper}>\r\n                            <h3>About me:</h3>\r\n                            <div>\r\n                                <b>My full name</b>\r\n                                <Field type=\"text\" name=\"fullName\" value={values.fullName} />\r\n                            </div>\r\n                            <div>\r\n                                <b>My interesting</b>\r\n                                <Field type=\"textarea\" name=\"aboutMe\" value={values.aboutMe} />\r\n                            </div>\r\n                            <div>\r\n                                <h3>My job:</h3>\r\n                                <div> <b>Searching a job</b>\r\n                                    <Field type=\"checkbox\" name=\"lookingForAJob\" />\r\n                                </div>\r\n                                <div><b>Professional skils</b>\r\n                                    <Field type=\"textarea\" name=\"lookingForAJobDescription\" value={values.lookingForAJobDescription} />\r\n                                </div>\r\n                            </div>\r\n                            <div className={s.contacts}><h3>My contacts:</h3>\r\n                                {Object.keys(props.profile.contacts as ContactsType).map(key => {\r\n                                    return (<div>\r\n                                        <b>{key}</b>  <div><Field key={key} type=\"text\" placeholder={key} name={\"contacts.\" + key} \r\n                                        value={!props.profile.contacts?'-': props.profile.contacts[key as keyof ContactsType]} />\r\n                                        </div></div>)\r\n                                })}\r\n                            </div>\r\n                            <button className={s.buttonSave} type=\"submit\" disabled={isSubmitting}>\r\n                                Save\r\n           </button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileFormChange","import React, { ChangeEvent, useState } from 'react';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport s from './Profileinfo.module.css'\r\nimport UserPhoto from '../../../assets/images/user.png'\r\nimport ProfileForm from './ProfileForm';\r\nimport ProfileFormChange from './ProfileFormChange';\r\nimport {ProfileType } from '../../../types/types';\r\n\r\ntype PropsTypes={\r\n    profile: ProfileType\r\n    putPhotos:(photos: File)=>void\r\n    changeProfile:(profile: ProfileType)=>void\r\n    isOwner:boolean\r\n    status:string\r\n    updateStatus:(status: string)=>void\r\n}\r\n\r\n\r\nconst ProfileInfo:React.FC<PropsTypes> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    let changePhoto = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.putPhotos(e.target.files[0])\r\n        }\r\n    } \r\n    let changeEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    let saveForm = (values:ProfileType, { setSubmitting }:any) => {\r\n        props.changeProfile(values);\r\n        setEditMode(false)\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.description}>\r\n                <div className={s.backgroundImg}>\r\n                </div>\r\n                <div className={s.editPhoto_Wrapper}>\r\n                    <img src={!props.profile.photos?UserPhoto:props.profile.photos.large || UserPhoto} className={s.photo} alt=\"description\" />\r\n                    <div className={s.editPhoto}>\r\n                        {props.isOwner &&\r\n                            <input className={s.editPhoto_input} type={'file'} id={\"input__file\"} onChange={changePhoto}></input>}\r\n                        <label className={s.editPhoto_label} htmlFor=\"input__file\"><i className=\"fas fa-camera-retro\"></i></label>\r\n                    </div>\r\n                </div>\r\n                <div className={s.form_wrapper}>\r\n                    {!editMode ? <ProfileForm status={props.status} updateStatus={props.updateStatus} changeEditMode={changeEditMode} profile={props.profile} isOwner={props.isOwner} />\r\n                        : <ProfileFormChange profile={props.profile} saveForm={saveForm} />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport UserImg from './../../../../assets/images/user.png'\r\nimport { ProfileType } from '../../../../types/types';\r\n\r\ntype PropsTypes={\r\n  profile: ProfileType|null\r\n  message: string\r\n  likesNumber: number\r\n}\r\n\r\nconst Post:React.FC<PropsTypes> = (props) => {\r\n  return (\r\n    <div className={s.postBlock}>\r\n      <div className={s.postBlock_img}>\r\n        <div className={s.img}>\r\n          <img src={!props.profile ? UserImg:props.profile.photos.small ||UserImg} alt=\"description\"></img>\r\n        </div>\r\n        <div className={s.name}>{!props.profile ? 'Users Name' : props.profile.fullName}</div>\r\n        <div className={s.time}>{new Date().toLocaleDateString()}</div>\r\n      </div>\r\n      <div className={s.postBlock_post}>{props.message}</div>\r\n      <div className={s.postBlock_likes}>\r\n        <span><i className=\"fas fa-heart\"></i>  {props.likesNumber}</span>\r\n        <span><i className=\"fas fa-comments\"></i> {props.likesNumber}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css'\r\nimport { Formik, Form, Field, FormikErrors } from 'formik';\r\nimport { PostsType, ProfileType } from '../../../types/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { actions } from '../../../redux/profileReducer';\r\n\r\n\r\n\r\nconst validateForm = (values: ValuesFormType) => {\r\n    const errors: FormikErrors<ValuesFormType> = {};\r\n    if (values.newPostText.length > 700) {\r\n        errors.newPostText = 'Please write maximum 700 simbols';\r\n    } else if (\r\n        values.newPostText.length < 1\r\n    ) {\r\n        errors.newPostText = 'You can not send an empty message'\r\n    }\r\n    return errors;\r\n}\r\n\r\ntype ValuesFormType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst MyPosts: React.FC = () => {\r\n    const posts = useSelector((state: AppStateType) => state.profilePage.posts)\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addPost = (newPostText: string) => {\r\n        dispatch(actions.addPost(newPostText))\r\n    }\r\n\r\n    const addNewPostForm = (values: ValuesFormType, { setSubmitting }: any) => {\r\n        addPost(values.newPostText)\r\n        setSubmitting(false);\r\n    }\r\n    \r\n    let postElement = posts.map(el => <Post profile={profile} message={el.message} key={el.id} likesNumber={el.likesNumber} />)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My blog</h3>\r\n            <div>\r\n                <Formik\r\n                    initialValues={{ newPostText: '' }}\r\n                    validate={validateForm}\r\n                    onSubmit={addNewPostForm}\r\n                >\r\n                    {({ values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        isSubmitting }) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <div className={s.inputPostBlock}>\r\n                                <div className={s.inputPost}>\r\n                                    <Field component=\"textarea\"\r\n                                        onChange={handleChange} onBlur={handleBlur} type=\"textarea\" name=\"newPostText\"\r\n                                        placeholder='Write new post here...' />\r\n                                    <div className={s.error}>{errors.newPostText && touched.newPostText && errors.newPostText}</div>\r\n                                </div>\r\n                                <div className={s.buttonPost}>\r\n                                    <button type=\"submit\" disabled={isSubmitting}> Add post </button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n            <div>\r\n                <div className={s.posts}>\r\n                    {postElement}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import MyPosts from './MyPosts';\r\n\r\nconst MyPostsContainer=()=>{\r\n    return(\r\n        <MyPosts />\r\n    )\r\n}\r\n\r\nexport default MyPostsContainer","import React, { useEffect } from 'react';\r\nimport ProfileInfo from './Profileinfo/Profileinfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport Preloader from '../common/preloader/Preloader'\r\nimport { ProfileType } from '../../types/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { getStatus, putPhotos } from '../../redux/profileReducer';\r\nimport { updateStatus, changeProfile, getProfile } from './../../redux/profileReducer';\r\nimport { useHistory } from 'react-router';\r\n \r\n\r\nlet Profile:React.FC= () => {\r\n  \r\n  const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n  const authUserId = useSelector((state: AppStateType) => state.auth.id)\r\n  const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n  \r\n  const dispatch = useDispatch()\r\n  const putPhotosCallback = (photos: any) => {\r\n    dispatch(putPhotos(photos))\r\n  }\r\n  const updateStatusCallback = (status: string) => {\r\n    dispatch(updateStatus(status))\r\n  }\r\n  const changeProfileCallback = (profile: ProfileType) => {\r\n    dispatch(changeProfile(profile))\r\n  }\r\n  const getProfileCallback = (userId: number | null) => {\r\n    dispatch(getProfile(userId))\r\n  }\r\n\r\n  const getStatusCallback = (userId: number) => {\r\n    dispatch(getStatus(userId))\r\n  }\r\n\r\n  const history = useHistory()\r\n  let adress = history.location.pathname\r\n  let id = Number(adress.substring(9))\r\n  let userId: number | null = +id\r\n\r\n  let updateProfile = () => {\r\n    if (userId===0) {\r\n      userId = authUserId\r\n      if (userId===0) {\r\n        history.push(\"/login\")\r\n      }}\r\n      getProfileCallback(userId)\r\n      getStatusCallback(userId as number)\r\n  }\r\n\r\n    useEffect(() => {\r\n      updateProfile()\r\n    }, [userId])\r\n\r\n    \r\n\r\n\r\n    if (!profile) {\r\n      return <Preloader />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <ProfileInfo isOwner={!id} putPhotos={putPhotosCallback}\r\n          profile={profile} status={status} updateStatus={updateStatusCallback} changeProfile={changeProfileCallback} />\r\n        <MyPostsContainer />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Profile","import Profile from './Profile';\r\n\r\nconst ProfileContainer=()=>  {\r\n    \r\n        return (\r\n            <Profile />\r\n        )\r\n    }\r\nexport default ProfileContainer\r\n","export default __webpack_public_path__ + \"static/media/logo.e1e33ec7.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport Logo from './../../assets/images/logo.png'\r\nimport UserImg from './../../assets/images/user.png'\r\n\r\ntype PropsType={\r\n    isAuth: boolean\r\n    login: string | null;\r\n    logout:()=>void\r\n\r\n}\r\n\r\nconst Header:React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <img src={Logo} alt=\"description\"></img>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ?\r\n                    <div className={s.loginBlock_logout}>\r\n                        <span className={s.userImg}><img src={\r\n                            UserImg\r\n                        } alt=\"description\" ></img></span>\r\n                        <span className={s.login}>{props.login}</span>\r\n                        <span className={s.buttonLogout}><button onClick={props.logout}>Log out</button> </span>\r\n                    </div> :\r\n                    <div className={s.buttonLogin}>\r\n                        <NavLink to={'/login'}>\r\n                            Log in\r\n                    </NavLink></div>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Header from './Header';\r\nimport {logout} from '../../redux/authReducer';\r\n\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateToPropsType={\r\n    isAuth: boolean\r\n    login:  string|null\r\n}\r\n\r\ntype MapDispatchToPropsType={\r\n    logout:()=>void\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component<MapStateToPropsType &MapDispatchToPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header logout={this.props.logout} isAuth={this.props.isAuth} login={this.props.login}/>\r\n        )\r\n    } \r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    \r\n    \r\n})\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType >(mapStateToProps, { logout})(HeaderContainer)\r\n","import React from 'react';\r\nimport { Formik, Form, Field, FormikErrors} from 'formik';\r\nimport {  useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/authReducer';\r\nimport { Redirect } from 'react-router';\r\nimport s from './LoginPage.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype ValuesType={\r\n    email:string\r\n    password:string\r\n    captcha: string \r\n    checkbox: any\r\n}\r\n//type ValuesTypeKeys= Extract<keyof ValuesType, string>\r\n\r\n\r\n\r\nconst validateForm = (values:ValuesType) => {\r\n    const errors:FormikErrors<ValuesType>={};\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n    ) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length < 6) {\r\n        errors.password = 'Must be more then 6 characters'\r\n    }\r\n    return errors;\r\n}\r\n\r\nconst LoginPage:React.FC = () => {\r\n\r\nconst isAuth=useSelector((state:AppStateType)=>{return state.auth.isAuth})\r\nconst captcha=useSelector((state:AppStateType)=>{return state.auth.captcha})\r\n\r\nconst dispatch=useDispatch()\r\n\r\n\r\n    const submit = (values:ValuesType, onSubmitProps:any) => {\r\n        dispatch(login(values.email, values.password, values.checkbox, values.captcha))\r\n        onSubmitProps.setSubmitting(false);\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return (\r\n        <div className={s.login_wrapper}>\r\n            <h1>Welcome to Chevos'ka social network !</h1>\r\n            <div>\r\n                <Formik\r\n                    initialValues={{ email: '', password: '', checkbox: 'true', captcha:'' }}\r\n                    validate={validateForm}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({ values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        isValid,\r\n                        isSubmitting }) => (\r\n                        <div className={s.loginForm}>\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <div>\r\n                                    <Field onChange={handleChange} onBlur={handleBlur} type=\"email\" name=\"email\" placeholder=\"Login\" value={values.email} />\r\n                                    <div className={s.error}> {errors.email && touched.email && errors.email}</div>\r\n                                </div>\r\n                                <div>\r\n                                    <Field onChange={handleChange} onBlur={handleBlur} type=\"password\" name=\"password\" placeholder=\"Password\" value={values.password} />\r\n                                    <div className={s.error}>{errors.password && touched.password && errors.password} </div>\r\n                                </div>\r\n                                <div className={s.checkbox}>\r\n                                    <Field onChange={handleChange} type=\"checkbox\" name=\"checkbox\" /> remember me\r\n                        </div>\r\n                                \r\n                                {captcha && <img src={captcha} alt=\"description\" />}\r\n                                {captcha && <Field onChange={handleChange} type=\"text\" name=\"captcha\" />}\r\n                                <div className={s.buttonLogin}>\r\n                                    <button type=\"submit\" disabled={!isValid || isSubmitting}>\r\n                                        Log in\r\n           </button>\r\n                                </div>\r\n                            </Form>\r\n                        </div>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage","import React from 'react';\r\nimport s from './Footer.module.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className={s.footer}>\r\n            <div className={s.footer_contacts}>\r\n                <div className={s.create}>Created by:</div>\r\n                <div>Anastasiya Atroshchenko</div>\r\n                <div>\r\n                    <i className=\"fab fa-linkedin\"></i>\r\n                    <span> linkedin.com/in/bellenastya</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport Footer from './Footer';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nclass FooterContainer extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <Footer/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state: AppStateType)=>({\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(FooterContainer)","import React, { useState } from 'react';\r\nimport s from './Paginator.module.css'\r\nimport cn from \"classnames\"\r\n\r\ntype PropsType={\r\n    totalItemCount: number\r\n    pageSize:number\r\n    currentPage:number\r\n    onPageChanged:(pageNumber:number)=>void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator:React.FC<PropsType> = ({ totalItemCount, pageSize, currentPage, onPageChanged, portionSize = 10 }) => {\r\n    let pageNumber = Math.ceil(totalItemCount / pageSize)\r\n\r\n    let page:Array<number> = [];\r\n\r\n    for (let i = 1; i <= pageNumber; i++) {\r\n        page.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pageNumber / portionSize);\r\n    let [numberPortion, setnumberPortion] = useState(1)\r\n    let leftPortionPageNumber = (numberPortion - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = numberPortion * portionSize;\r\n\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {numberPortion > 1 && <button onClick={() => { setnumberPortion(numberPortion - 1) }}>\r\n                <i className=\"fas fa-angle-double-left\"></i>\r\n            </button>}\r\n            {page\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span className={cn({\r\n                        [s.activePage]: currentPage === p\r\n                    }, s.pageNumber)}\r\n                        key={p}\r\n                        onClick={(e) => { onPageChanged(p) }}\r\n                    >{p} </span>\r\n                })}\r\n            {numberPortion < portionCount && <button onClick={() => { setnumberPortion(numberPortion + 1) }}>\r\n                <i className=\"fas fa-angle-double-right\"></i>\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport UserImg from './../../assets/images/user.png'\r\nimport s from './FriendPage.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../types/types';\r\n\r\ntype PropsType={\r\n    totalFriendCount: number\r\n    pageSize : number\r\n    currentPage: number\r\n    changePageFriends:(pageNumber:number)=>void\r\n    users: Array<UserType>\r\n    unfollow:(userId:number)=>void\r\n\r\n\r\n}\r\n\r\nconst FriendPage:React.FC<PropsType> = (props) => {\r\n\r\n\r\n    return (<div className={s.friendsPage_wrapper}>\r\n        <h3>My Friends</h3>\r\n        <div>\r\n            <Paginator totalItemCount={props.totalFriendCount}\r\n                pageSize={props.pageSize}\r\n                currentPage={props.currentPage}\r\n                onPageChanged={props.changePageFriends}\r\n            />\r\n        </div>\r\n        <div className={s.friendPage_flex}>{props.users.map(u =>\r\n            <div className={s.friend_info}>\r\n\r\n                <div>\r\n                    <NavLink to={'/profile/'+u.id}>\r\n                    <img src={u.photos.small || UserImg} alt=\"description\"></img>\r\n                    </NavLink>\r\n                    </div>\r\n                <div className={s.friend_info_name}>{u.name}</div>\r\n                <div className={s.friend_info_status}>{u.status}</div>\r\n\r\n\r\n                <span className={s.friendButtonMessage}><NavLink to='./dialog'>Write message</NavLink></span>\r\n                <button className={s.friendButtonFollow} onClick={() => {\r\n                    props.unfollow(u.id)\r\n                }\r\n                }>Unfollow</button>\r\n            </div>)\r\n        }\r\n        </div>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default FriendPage","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FriendPage from './FriendPage';\r\nimport { getFollowedUserThunk} from '../../redux/friendPageReducer';\r\nimport {unfollow } from '../../redux/usersReducer';\r\nimport { UserType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateToPropsType={\r\n    currentPage: number\r\n    pageSize: number\r\n    friend: boolean\r\n    users: Array<UserType>\r\n    totalFriendCount: number\r\n}\r\ntype MapDispatchToPropsType={\r\n    getFollowedUserThunk:(currentPage: number, pageSize:number, friend:boolean)=>void\r\n    unfollow:(userId: number)=>void\r\n}\r\ntype OwnType={ \r\n}\r\ntype PropsType=MapStateToPropsType & MapDispatchToPropsType & OwnType\r\n\r\n\r\nclass FriendPageContainer extends React.Component<PropsType>{\r\n\r\n    componentDidMount(){\r\n        this.props.getFollowedUserThunk(this.props.currentPage, this.props.pageSize, this.props.friend)\r\n    }\r\n\r\n    componentDidUpdate(prevProps:any) {\r\n        if (this.props.users !== prevProps.users) {\r\n            this.props.getFollowedUserThunk(this.props.currentPage, this.props.pageSize, this.props.friend)\r\n        }\r\n    }\r\n\r\n    changePageFriends=(currentPage:number)=>{\r\n        this.props.getFollowedUserThunk(currentPage, this.props.pageSize, this.props.friend)\r\n    }\r\n        \r\n    render(){\r\n        \r\n        return(<>\r\n            <FriendPage users={this.props.users} \r\n            pageSize={this.props.pageSize} \r\n            changePageFriends={this.changePageFriends} \r\n            totalFriendCount={this.props.totalFriendCount} \r\n            currentPage={this.props.currentPage}\r\n            unfollow={this.props.unfollow}\r\n            />\r\n          </>  \r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps=(state:AppStateType)=>({\r\n    currentPage: state.friendPage.currentPage,\r\n    pageSize: state.friendPage.pageSize,\r\n    friend: state.friendPage.friend,\r\n    users: state.friendPage.users,\r\n    totalFriendCount: state.friendPage.totalFriendCount,\r\n    \r\n\r\n\r\n})\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, OwnType, AppStateType>\r\n(mapStateToProps,{getFollowedUserThunk, unfollow})(FriendPageContainer)","import { AppStateType } from \"./redux-store\"\r\n\r\nexport const selectorUsers=(state: AppStateType)=>{\r\n    return state.usersPage.users\r\n}\r\nexport const selectorPageSize=(state: AppStateType)=>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const selectorTotalUsersCount=(state:AppStateType)=>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const selectorCurrentPage=(state:AppStateType)=>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const selectorIsfetcing=(state:AppStateType)=>{\r\n    return state.usersPage.isfetcing\r\n}\r\nexport const selectorFollowingInProgress=(state:AppStateType)=>{\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\nexport const selectorTerm=(state:AppStateType)=>{\r\n    return state.usersPage.term\r\n}\r\n\r\nexport const selectorFriend=(state:AppStateType)=>{\r\n    return state.usersPage.friend\r\n}","import React from 'react';\r\nimport { Formik, Form, Field, FormikHelpers } from 'formik';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectorFriend, selectorTerm } from '../../redux/usersSelector';\r\n\r\n\r\ntype PropsType = {\r\n    searchUsers: (term: string, friend: null | boolean) => void\r\n\r\n}\r\ntype ValuesFormType = {\r\n    term: string\r\n    friend: null | boolean\r\n}\r\ntype ValuesType = {\r\n    term: string\r\n    friend: 'null' | 'true' | 'false'\r\n}\r\n\r\nconst SearchFilter: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const term = useSelector(selectorTerm)\r\n    const friend = useSelector(selectorFriend)\r\n\r\n    let searchUsers = (values: ValuesType, { setSubmitting }: FormikHelpers<ValuesType>) => {\r\n        const filter: ValuesFormType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        props.searchUsers(filter.term, filter.friend)\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{ term: term, friend: String(friend) as 'null' | 'true' | 'false' }}\r\n                onSubmit={searchUsers}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only friend</option>\r\n                            <option value=\"false\">Not friend</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Search\r\n           </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default SearchFilter","import React from 'react';\r\nimport s from './Users.module.css'\r\nimport userPhto from '../../assets/images/user.png'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../types/types';\r\n\r\ntype PropsType={\r\n    user: UserType\r\n    followingInProgress:Array<number>\r\n    follow:(userId: number)=>void\r\n    unfollow:(userId: number)=>void\r\n}\r\n\r\nlet UseR:React.FC<PropsType>= ({ user, followingInProgress, follow, unfollow }) => {\r\n    let u = user;\r\n    return (\r\n        <div className={s.user_wrapper}>\r\n            <div className={s.user_photo}>\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <img src={u.photos.small != null ? u.photos.small : userPhto} alt=\"description\"></img>\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.user_name}>\r\n                <div>{u.name}</div>\r\n            </div>\r\n            <div className={s.user_button}>\r\n                {u.followed \r\n                    ? <button className={s.user_buttonUnfollow} disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                        unfollow(u.id)\r\n                    }\r\n                    }>Unfollow</button>\r\n                    : <button className={s.user_buttonFollow} disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                        follow(u.id)\r\n                    }\r\n                    }>Follow</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UseR;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUsers, follow, unfollow } from '../../redux/usersReducer';\r\nimport { selectorCurrentPage, selectorFollowingInProgress, selectorFriend, selectorPageSize, selectorTotalUsersCount, selectorUsers } from '../../redux/usersSelector';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport SearchFilter from './SearchFilter';\r\nimport UseR from './UseR';\r\nimport s from './Users.module.css'\r\nimport { selectorTerm } from './../../redux/usersSelector';\r\nimport { useHistory } from 'react-router';\r\n\r\ntype AdressType={\r\n    term?: string\r\n    friend?: string\r\n    currentPage?:string\r\n}\r\n\r\nlet Users: React.FC = () => {\r\n\r\n    const currentPage = useSelector(selectorCurrentPage)\r\n    const totalUsersCount = useSelector(selectorTotalUsersCount)\r\n    const pageSize = useSelector(selectorPageSize)\r\n    const users = useSelector(selectorUsers)\r\n    const term = useSelector(selectorTerm)\r\n    const friend = useSelector(selectorFriend)\r\n    const followingInProgress = useSelector(selectorFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const queryString = require('query-string');\r\n        const parsed = queryString.parse(history.location.search)\r\n\r\n        let actualCurrentPage = currentPage\r\n        let actualTerm = term\r\n        let actualFriend = friend\r\n\r\n        if (parsed.page)  actualCurrentPage = Number(parsed.page) \r\n        if (parsed.term)  actualTerm = parsed.term \r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFriend = null\r\n                break\r\n            case 'true':\r\n                actualFriend = true\r\n                break\r\n            case 'false':\r\n                actualFriend = false\r\n                break\r\n        }\r\n        dispatch(getUsers(actualCurrentPage, pageSize, actualTerm, actualFriend))\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        let adress:AdressType = {}\r\n\r\n        if(term) adress.term =term\r\n        if(friend !==null) adress.friend=String(friend)\r\n        if(currentPage!==1) adress.currentPage=String(currentPage)\r\n\r\n        const queryString = require('query-string');\r\n        \r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(adress)\r\n        })\r\n    }, [term, friend, currentPage])\r\n\r\n    const searchUsers = (term: string, friend: null | boolean) => {\r\n        dispatch(getUsers(1, pageSize, term, friend))\r\n    }\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(getUsers(currentPage, pageSize, term, friend))\r\n    }\r\n    const followUser = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const unfollowUser = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <SearchFilter searchUsers={searchUsers} />\r\n        </div>\r\n        <Paginator currentPage={currentPage}\r\n            onPageChanged={onPageChanged}\r\n            totalItemCount={totalUsersCount}\r\n            pageSize={pageSize} />\r\n        <div className={s.users_wrapper}>\r\n            {users.map(u => <div key={u.id}>\r\n                <UseR user={u} follow={followUser} unfollow={unfollowUser}\r\n                    followingInProgress={followingInProgress} />\r\n            </div>)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Users;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Users from './Users';\r\nimport Preloader from '../common/preloader/Preloader';\r\nimport { selectorIsfetcing } from '../../redux/usersSelector';\r\n\r\nconst UsersPage=()=>{\r\n    const isfetcing=useSelector(selectorIsfetcing)\r\n    return(\r\n        <> \r\n            {isfetcing ? <Preloader /> : null}\r\n            <Users/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default UsersPage","import React from 'react';\nimport { withSuspense } from './hoc/withSuspense';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport Music from './components/Music/Music';\nimport Setting from './components/Setting/Setting';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport store, { AppStateType } from './redux/redux-store';\nimport { Provider } from \"react-redux\"\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport LoginPage from './components/Login/LoginPage';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Redirect, withRouter } from 'react-router';\nimport { initializeApp } from './redux/appReducer';\nimport Preloader from './components/common/preloader/Preloader';\nimport FooterContainer from './components/Footer/FooterContainer';\nimport FriendPageContainer from './components/FreindPage/FriendPageContainer';\nimport UsersPage from './components/Users/UsersContainer';\n\n//import DialogContainer from './components/Dialog/DialogContainer';\nconst DialogContainer = React.lazy(() => import('./components/Dialog/DialogContainer'));\n\ntype MapStateToPropsType={\n  isInitialised: boolean\n}\ntype MapDispatchToPropsType={\n  initializeApp:()=>void\n}\ntype OwnPropsType={\n\n}\ntype PropsType=MapStateToPropsType & MapDispatchToPropsType& OwnPropsType\n\nconst SuspenseDialog=withSuspense(DialogContainer)\n\nclass App extends React.Component<PropsType> {\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n  render() {\n    if (!this.props.isInitialised) {\n      return <Preloader />\n    }\n     \n    return (\n      <div className='app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n        <FooterContainer />\n        <div className='app-wrapper-content'>\n          <Route exact path='/' render={() => <Redirect to={\"/profile\"} />} />\n          <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\n          {/*<Route path='/dialog' render={() => <DialogContainer />} />*/}\n          <Route path='/dialog' render={()=><SuspenseDialog/>} />\n          <Route path='/music' render={() => <Music />} />\n          <Route path='/setting' render={() => <Setting />} />\n          <Route path='/users' render={() => <UsersPage />} />\n          <Route path='/login' render={() => <LoginPage />} />\n          {/*<Route path='*' render={() => (<div>404 NOT FOUND</div>)} />*/}\n          <Route path='/friendpage' render={() => <FriendPageContainer />} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state:AppStateType) => ({\n  isInitialised: state.app.isInitialised\n})\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, { initializeApp }))\n  (App)\n\nlet MainApp:React.FC = () => {\n  return <HashRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </HashRouter>\n}\n\nexport default MainApp\n","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\n  ReactDOM.render(\n      <MainApp /> , document.getElementById('root')\n  )\n  \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__UerlR\",\"item\":\"Navbar_item__3uoy-\",\"active\":\"Navbar_active__1aqQl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_block_name_status\":\"ProfileForm_form_block_name_status__3tRcD\",\"fullName\":\"ProfileForm_fullName__1gRGJ\",\"status\":\"ProfileForm_status__2d0Wu\",\"status_input\":\"ProfileForm_status_input__2nSQ0\",\"button_edit\":\"ProfileForm_button_edit__2BJYY\",\"form_block_job_contacts\":\"ProfileForm_form_block_job_contacts__1c0TP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users_wrapper\":\"Users_users_wrapper__2iSEQ\",\"user_wrapper\":\"Users_user_wrapper__ay5dj\",\"user_photo\":\"Users_user_photo__3xj3L\",\"user_button\":\"Users_user_button__39lDl\",\"user_buttonUnfollow\":\"Users_user_buttonUnfollow__253Cc\",\"user_name\":\"Users_user_name__2qYQq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"Profileinfo_description__3wem2\",\"backgroundImg\":\"Profileinfo_backgroundImg__1vVEI\",\"photo\":\"Profileinfo_photo__L8xd2\",\"editPhoto\":\"Profileinfo_editPhoto__1MR1c\",\"editPhoto_Wrapper\":\"Profileinfo_editPhoto_Wrapper__17duZ\",\"editPhoto_input\":\"Profileinfo_editPhoto_input__-yVFm\",\"editPhoto_label\":\"Profileinfo_editPhoto_label__tQNC1\",\"form_wrapper\":\"Profileinfo_form_wrapper__paOyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"Post_postBlock__2W0JB\",\"postBlock_img\":\"Post_postBlock_img__1nDJc\",\"name\":\"Post_name__uzqtr\",\"time\":\"Post_time__2nWa8\",\"img\":\"Post_img__38J2z\",\"postBlock_post\":\"Post_postBlock_post__3aUmf\",\"postBlock_likes\":\"Post_postBlock_likes__1_wad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1YroQ\",\"loginBlock\":\"Header_loginBlock__2aYJs\",\"loginBlock_logout\":\"Header_loginBlock_logout__3MfhW\",\"login\":\"Header_login__1wWjh\",\"userImg\":\"Header_userImg__2XgG7\",\"buttonLogout\":\"Header_buttonLogout__1Ffyh\",\"buttonLogin\":\"Header_buttonLogin__QDgul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsPage_wrapper\":\"FriendPage_friendsPage_wrapper__3s0gI\",\"friendPage_flex\":\"FriendPage_friendPage_flex__1MC6Z\",\"friend_info\":\"FriendPage_friend_info__Ckecn\",\"friend_info_name\":\"FriendPage_friend_info_name__KnlpR\",\"friend_info_status\":\"FriendPage_friend_info_status__2LC_-\",\"friendButtonFollow\":\"FriendPage_friendButtonFollow__cAR_w\",\"friendButtonMessage\":\"FriendPage_friendButtonMessage__1-CXX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1FlvS\",\"posts\":\"MyPosts_posts__32t08\",\"inputPostBlock\":\"MyPosts_inputPostBlock__3ulrU\",\"buttonPost\":\"MyPosts_buttonPost__pCivc\",\"error\":\"MyPosts_error__1_DOy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_wrapper\":\"LoginPage_login_wrapper__3Lf8v\",\"loginForm\":\"LoginPage_loginForm__1u2kc\",\"error\":\"LoginPage_error__3u0Zt\",\"buttonLogin\":\"LoginPage_buttonLogin__14Yyk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formChange_wrapper\":\"ProfileFormChange_formChange_wrapper__XKTfS\",\"contacts\":\"ProfileFormChange_contacts__2sB8Z\",\"buttonSave\":\"ProfileFormChange_buttonSave__1UTGa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__2NedM\",\"footer_contacts\":\"Footer_footer_contacts__3GBOu\",\"create\":\"Footer_create___S9Iu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__YfgDA\",\"pageNumber\":\"Paginator_pageNumber__1VC4O\",\"activePage\":\"Paginator_activePage__2sABI\"};","import { DialogsType, MessagesType } from '../types/types'\r\nimport UserImg from './../assets/images/user.png'\r\nimport { CommonActionsTypes } from './redux-store'\r\n\r\n\r\nlet initialState = { \r\n    dialogs: [\r\n        { name: 'Nastya', id: 1, photo: UserImg},\r\n        { name: 'Maksim', id: 2,  photo: UserImg },\r\n        { name: 'Sacha', id: 3, photo:UserImg },\r\n        { name: 'Alina', id: 4, photo: UserImg },\r\n        { name: 'Zenia', id: 5, photo: UserImg },\r\n        { name: 'Veronika', id: 6, photo: UserImg }\r\n    ] as Array<DialogsType>,\r\n\r\n    messages: [\r\n        { id: 1, message: 'Hello, how are you?', name:'Nastya Atroshanka', time:'01.09.2021', photo: UserImg },\r\n        { id: 2, message: 'Hi, i am fine!', name:'Nastya Atroshanka', time:'01.09.2021',photo: UserImg },\r\n        { id: 3, message: 'What is you name?', name:'Nastya Atroshanka', time:'01.09.2021',photo: UserImg },\r\n        { id: 4, message: 'My name is Nastya. What is your name?', name:'Nastya Atroshanka', time:'01.09.2021',photo: UserImg },\r\n        { id: 5, message: 'My name is Maksim.', name:'Nastya Atroshanka', time:'01.09.2021',photo: UserImg }\r\n    ] as Array<MessagesType>\r\n}\r\n\r\nexport type InitialStateType= typeof initialState\r\n\r\nconst dialogReducer = (state:InitialStateType = initialState, action:ActionsTypes):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'dialog/SEND-MESSAGE-BODY':\r\n            let body = action.newMessage;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, \r\n                    {id: 5, message: body, \r\n                    name:'Nastya Atroshanka', \r\n                    time:'01.09.2021',\r\n                    photo: UserImg }]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes=CommonActionsTypes<typeof actions>\r\n\r\nexport const actions={\r\n    sendMessageBody:(newMessage:string) => ({\r\n        type: 'dialog/SEND-MESSAGE-BODY', newMessage} as const)\r\n}\r\n\r\n\r\nexport default dialogReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader_wrapper\":\"Preloader_preloader_wrapper__1EPI_\"};","export default __webpack_public_path__ + \"static/media/user.7a28dde6.png\";"],"sourceRoot":""}