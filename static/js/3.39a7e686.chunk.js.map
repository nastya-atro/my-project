{"version":3,"sources":["components/Dialog/Dialog.module.css","hoc/withAuthRedirect.tsx","components/Dialog/DialogItem/DialogItem.tsx","components/Dialog/MessageItem/MessageItem.tsx","components/Dialog/Dialog.tsx","components/Dialog/DialogContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","Component","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","src","photo","alt","name","Message","dialogMessage","dialog_topItem","time","doalog_bottomItem","message","validateForm","values","errors","newMessage","length","DialogPage","dialogs","useSelector","messagesPage","messages","dispatch","useDispatch","dialogElement","map","d","messageElement","m","dialogsItem","initialValues","validate","onSubmit","setSubmitting","actions","sendMessageBody","touched","handleChange","handleBlur","handleSubmit","isSubmitting","messageForm","errorform","component","onChange","onBlur","placeholder","value","error","messageButton","type","disabled","DialogContainer","connect","restProps"],"mappings":"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","file":"static/js/3.39a7e686.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2SC7U\",\"name\":\"Dialog_name__1r7Kx\",\"dialogsItem\":\"Dialog_dialogsItem__2TzQl\",\"dialogs\":\"Dialog_dialogs__3rGgk\",\"active\":\"Dialog_active__1hSZH\",\"dialogMessage\":\"Dialog_dialogMessage__-WhI-\",\"dialog_topItem\":\"Dialog_dialog_topItem__1i25G\",\"doalog_bottomItem\":\"Dialog_doalog_bottomItem__1Qd0Z\",\"messageForm\":\"Dialog_messageForm__2VBTX\",\"messageButton\":\"Dialog_messageButton__1WI_q\",\"error\":\"Dialog_error__UirOf\"};","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapStateToPropsType={\r\n    isAuth:boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(Component:React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapStateToPropsType>=(props)=> {\r\n        let {isAuth, ...restProps}=props\r\n            if(!props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...restProps as WCP} />\r\n         \r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapStateToPropsType, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialog.module.css'\r\n\r\ntype PropsType={\r\n    photo: string\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem:React.FC<PropsType> =(props)=>{\r\n    let path = \"/dialog/\"+props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n                    <NavLink to={path} activeClassName={s.active}>\r\n                    <img src={props.photo} alt=\"description\"></img>\r\n                   <div className={s.name}> {props.name}</div>\r\n                    </NavLink>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialog.module.css'\r\n\r\ntype PropsType={\r\n    name: string\r\n    photo: string\r\n    time: string\r\n    message: string\r\n\r\n}\r\n\r\nconst Message:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialogMessage}>\r\n            <div className={s.dialog_topItem}>\r\n                <div>{props.name}</div>\r\n                <div><img src={props.photo} alt=\"description\"></img></div>\r\n                <div>{props.time}</div>\r\n            </div>\r\n            <div className={s.doalog_bottomItem}>{props.message} </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialog.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './MessageItem/MessageItem';\r\nimport { Formik, Form, Field, FormikErrors } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { actions } from '../../redux/dialogReducer';\r\n\r\n\r\n const validateForm = (values:ValuesFormType) => {\r\n    let errors:FormikErrors<ValuesFormType> = {};\r\n    if (!values.newMessage) {\r\n      errors.newMessage = 'Required';\r\n    } else if (\r\n        values.newMessage.length>50\r\n    ) {\r\n      errors.newMessage = 'Please, dont write more then 50 sumbols';\r\n    }\r\n    return errors;\r\n  }\r\n\r\n\r\ntype ValuesFormType={\r\n    newMessage: string\r\n}\r\n\r\nconst DialogPage:React.FC = () => {\r\n\r\n    const dialogs=useSelector((state:AppStateType)=>state.messagesPage.dialogs)\r\n    const messages=useSelector((state:AppStateType)=>state.messagesPage.messages)\r\n    const dispatch=useDispatch()\r\n    const sendMessageBody=(newMessage: string)=>{\r\n        dispatch(actions.sendMessageBody(newMessage))\r\n    }\r\n\r\n    const addNewMessage = (values:ValuesFormType, { setSubmitting }:any) => {\r\n        sendMessageBody(values.newMessage)\r\n        setSubmitting(false);\r\n    }\r\n    let dialogElement = dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} photo={d.photo} />)\r\n    let messageElement = messages.map(m => <Message photo={m.photo} name={m.name} time={m.time} message={m.message} key={m.id} />)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElement}\r\n                <div>\r\n                    <Formik\r\n                        initialValues={{ newMessage: '' }}\r\n                        validate={validateForm}\r\n                        onSubmit={addNewMessage}\r\n                    >\r\n                        {({ values,\r\n                            errors,\r\n                            touched,\r\n                            handleChange,\r\n                            handleBlur,\r\n                            handleSubmit,\r\n                            isSubmitting }) => (\r\n                            <div className={s.messageForm}>\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <Field className={errors.newMessage && touched.newMessage ? s.errorform : \"\"} component=\"textarea\" onChange={handleChange} onBlur={handleBlur}\r\n                                        placeholder=\"Write your message\" name=\"newMessage\" value={values.newMessage} />\r\n                                    {errors.newMessage && touched.newMessage && <div className={s.error}>{errors.newMessage}</div>}\r\n                                    <div className={s.messageButton}>\r\n                                        <button type=\"submit\" disabled={isSubmitting}>\r\n                                            Send messages\r\n                                    </button>\r\n                                    </div>\r\n                                </Form>\r\n                            </div>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogPage;","import { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport DialogPage from './Dialog';\r\n \r\n\r\nconst Dialog=()=>{\r\n    return(\r\n        <DialogPage/>\r\n    )\r\n}\r\nconst DialogContainer=withAuthRedirect(Dialog)\r\nexport default DialogContainer\r\n\r\n"],"sourceRoot":""}